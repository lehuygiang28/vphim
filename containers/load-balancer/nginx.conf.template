worker_processes auto;
error_log /dev/stderr notice;  # Log errors to stderr (console)
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$selected_backend" "$backend_host"';

    access_log /dev/stdout main;  # Log access to stdout (console)

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Define cache path with max size of 5GB and no inactive timeout
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=cache_image_webp:50m max_size=5g use_temp_path=off;

    # Define each backend server as an upstream group
    upstream b0 {
        server gh150-vphim-api-wk7.hf.space:443;
    }

    upstream b1 {
        server gh150-vp-api-wk1.hf.space:443;
    }

    upstream b2 {
        server gh150-vp-api-wk2.hf.space:443;
    }

    # Use split_clients to randomly assign a backend to each request
    split_clients "${remote_addr}AAA" $selected_backend {
        10% "b0";
        45% "b1";
        *   "b2";
    }

    map $selected_backend $backend_host {
        "b0" "gh150-vphim-api-wk7.hf.space";
        "b1" "gh150-vp-api-wk1.hf.space";
        "b2" "gh150-vp-api-wk2.hf.space";
    }

    server {
        listen 7000;
        server_name _;

        location /api/auth {
            # Always proxy to the first backend (b1)
            proxy_pass https://b1;

            # Set headers dynamically based on the selected backend
            proxy_set_header Host gh150-vp-api-wk1.hf.space;
            proxy_set_header X-Host gh150-vp-api-wk1.hf.space;

            add_header X-Lb-Server b1 always;  # Indicate that the first backend is used
        }

        location / {
            # Proxy to the selected backend based on split_clients result
            proxy_pass https://$selected_backend;

            # Enable caching for all responses
            proxy_cache cache_image_webp;

            # Use default caching behavior without expiration
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

            # Set headers dynamically based on the selected backend
            proxy_set_header Host $backend_host;
            proxy_set_header X-Host $backend_host;

            # Add custom cache status header
            add_header X-Lb-Cache-Status $upstream_cache_status always;

            add_header X-Lb-Server $selected_backend always;
        }

        location /lb-stats {
            stub_status;
        }
    }
}
