# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Actor {
  _id: ID!
  name: String!
  slug: String!
  content: String
  thumbUrl: String
  posterUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Category {
  _id: ID!
  name: String!
  slug: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Region {
  _id: ID!
  name: String!
  slug: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Director {
  _id: ID!
  name: String!
  slug: String!
  content: String
  thumbUrl: String
  posterUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EpisodeServerData {
  slug: String!
  name: String!
  filename: String!
  linkM3u8: String!
  linkEmbed: String!
}

type Episode {
  serverData: [EpisodeServerData!]!
  serverName: String!
}

type Movie {
  _id: ID!
  name: String!
  actors: [Actor!]
  categories: [Category!]
  cinemaRelease: Boolean
  content: String
  countries: [Region!]
  createdAt: DateTime
  directors: [Director!]
  episode: [Episode!]
  episodeCurrent: String!
  episodeTotal: String!
  isCopyright: Boolean!
  lang: String
  lastSyncModified: DateTime!
  notify: String
  originName: String
  posterUrl: String!
  quality: String
  showtimes: String
  slug: String!
  status: String!
  subDocquyen: Boolean
  thumbUrl: String!
  time: String
  trailerUrl: String
  type: String!
  updatedAt: DateTime
  view: Float
  year: Float
}

type GetMoviesOutput {
  data: [Movie!]!
  total: Float!
}

type Query {
  regions: [Region!]!
  movies(input: GetMoviesInput!): GetMoviesOutput!
}

input GetMoviesInput {
  name: String
  categories: String
  countries: String
  cinemaRelease: Boolean
  isCopyright: Boolean
  keywords: String
  limit: Float = 10
  page: Float = 1
  slug: String
  sortBy: String
  sortOrder: String
  type: String
  years: String
}

type Mutation {
  updateRegion(slug: String!, input: UpdateRegionInput!): Region!
}

input UpdateRegionInput {
  name: String
}