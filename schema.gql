# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Actor {
  _id: ID!
  name: String!
  slug: String!
  content: String
  thumbUrl: String
  posterUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GetActorsOutput {
  data: [Actor!]!
  total: Float!
}

type Category {
  _id: ID!
  name: String!
  slug: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GetCategoriesOutput {
  data: [Category!]!
  total: Float!
}

type Region {
  _id: ID!
  name: String!
  slug: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Director {
  _id: ID!
  name: String!
  slug: String!
  content: String
  thumbUrl: String
  posterUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EpisodeServerData {
  slug: String
  name: String
  filename: String
  linkM3u8: String
  linkEmbed: String
}

type Episode {
  serverData: [EpisodeServerData!]
  originSrc: String
  serverName: String
}

type TmdbType {
  type: String
  id: String
  season: Float
  voteAverage: Float
  voteCount: Float
}

type ImdbType {
  id: String
}

type Movie {
  _id: ID!
  name: String!
  actors: [Actor!]
  categories: [Category!]
  cinemaRelease: Boolean
  content: String
  countries: [Region!]
  createdAt: DateTime
  directors: [Director!]
  episode: [Episode!]
  episodeCurrent: String
  episodeTotal: String
  isCopyright: Boolean
  lang: String
  lastSyncModified: DateTime!
  notify: String
  originName: String
  quality: String
  showtimes: String
  slug: String!
  status: String
  subDocquyen: Boolean
  thumbUrl: String!
  posterUrl: String
  time: String
  trailerUrl: String
  type: String!
  updatedAt: DateTime
  view: Float
  year: Float
  imdb: ImdbType
  tmdb: TmdbType
  deletedAt: DateTime
}

type BlockActivityLogType {
  action: String!
  actionAt: DateTime!
  actionBy: ID!
  note: String!
  reason: String!
}

type UserBlockType {
  isBlocked: Boolean!
  activityLogs: [BlockActivityLogType!]
}

type AvatarType {
  url: String
}

type MovieFollowType {
  _id: ID!
  name: String!
  actors: [Actor!]
  categories: [Category!]
  cinemaRelease: Boolean
  content: String
  countries: [Region!]
  createdAt: DateTime
  directors: [Director!]
  episode: [Episode!]
  episodeCurrent: String
  episodeTotal: String
  isCopyright: Boolean
  lang: String
  lastSyncModified: DateTime!
  notify: String
  originName: String
  quality: String
  showtimes: String
  slug: String!
  status: String
  subDocquyen: Boolean
  thumbUrl: String!
  posterUrl: String
  time: String
  trailerUrl: String
  type: String!
  updatedAt: DateTime
  view: Float
  year: Float
  imdb: ImdbType
  tmdb: TmdbType
  deletedAt: DateTime
}

type UserType {
  _id: ID!
  email: String!
  createdAt: DateTime!
  emailVerified: Boolean!
  fullName: String!
  password: String!
  role: String!
  updatedAt: DateTime!
  avatar: AvatarType
  block: UserBlockType
  followMovies: [MovieFollowType!]
}

type GetDirectorsOutput {
  data: [Director!]!
  total: Float!
}

type GetRegionsOutput {
  data: [Region!]!
  total: Float!
}

type GetMoviesOutput {
  data: [Movie!]!
  total: Float!
}

input EpisodeServerDataInputType {
  slug: String
  name: String
  filename: String
  linkM3u8: String
  linkEmbed: String
}

input EpisodeInputType {
  serverData: [EpisodeServerDataInputType!]
  originSrc: String
  serverName: String
}

input TmdbInputType {
  type: String
  id: String
  season: Float
  voteAverage: Float
  voteCount: Float
}

input ImdbInputType {
  id: String
}

type Query {
  getMe: UserType!
  movie(input: GetMovieInput!): Movie!
  movies(input: GetMoviesInput!): GetMoviesOutput!
  moviesForAdmin(input: GetMoviesAdminInput!): GetMoviesOutput!
  actors(input: GetActorsInput!): GetActorsOutput!
  categories(input: GetCategoriesInput!): GetCategoriesOutput!
  category(input: GetCategoryInput!): Category!
  directors(input: GetDirectorsInput!): GetDirectorsOutput!
  regions(input: GetRegionsInput!): GetRegionsOutput!
}

input GetMovieInput {
  slug: String
  _id: String
}

input GetMoviesInput {
  name: String
  categories: String
  countries: String
  cinemaRelease: Boolean
  isCopyright: Boolean
  keywords: String
  limit: Float = 10
  page: Float = 1
  slug: String
  sortBy: String
  sortOrder: String
  type: String
  years: String
  status: String
}

input GetMoviesAdminInput {
  name: String
  categories: String
  countries: String
  cinemaRelease: Boolean
  isCopyright: Boolean
  keywords: String
  limit: Float = 10
  page: Float = 1
  slug: String
  sortBy: String
  sortOrder: String
  type: String
  years: String
  status: String
  resetCache: Boolean
  isDeleted: Boolean
  bypassCache: Boolean
}

input GetActorsInput {
  limit: Float = 10
  page: Float = 1
  keywords: String
}

input GetCategoriesInput {
  limit: Float = 10
  page: Float = 1
  keywords: String
  ids: [String!]
  slugs: [String!]
}

input GetCategoryInput {
  _id: String
  slug: String
}

input GetDirectorsInput {
  limit: Float = 10
  page: Float = 1
  keywords: String
}

input GetRegionsInput {
  limit: Float = 10
  page: Float = 1
  keywords: String
}

type Mutation {
  mutationMe(input: MutationMeInput!): UserType!
  followMovie(input: MutationFollowMovieInput!): UserType!
  unfollowMovie(input: MutationUnfollowMovieInput!): UserType!
  createMovie(input: CreateMovieInput!): Movie!
  updateMovie(input: UpdateMovieInput!): Movie!
  mutateHardDeleteMovie(input: MutateHardDeleteMovieInput!): Int!
  updateCategory(input: UpdateCategoryInput!): Category!
  createCategory(input: CreateCategoryInput!): Category!
  deleteCategory(input: DeleteCategoryInput!): Int!
  updateRegion(slug: String!, input: UpdateRegionInput!): Region!
}

input MutationMeInput {
  fullName: String
  avatar: AvatarMutationInput
}

input AvatarMutationInput {
  url: String
}

input MutationFollowMovieInput {
  movieSlug: String!
}

input MutationUnfollowMovieInput {
  movieSlug: String!
}

input CreateMovieInput {
  name: String!
  slug: String!
  originName: String
  content: String
  type: String!
  lang: String
  quality: String
  showtimes: String
  status: String!
  time: String
  thumbUrl: String!
  posterUrl: String
  trailerUrl: String
  isCopyright: Boolean
  episodeCurrent: String
  episodeTotal: String
  subDocquyen: Boolean
  cinemaRelease: Boolean
  year: Float
  actors: [ID!]
  directors: [ID!]
  categories: [ID!]
  countries: [ID!]
  episode: [EpisodeInputType!]
  tmdb: TmdbInputType
  imdb: ImdbInputType
}

input UpdateMovieInput {
  _id: ID!
  name: String
  actors: [ID!]
  categories: [ID!]
  cinemaRelease: Boolean
  content: String
  countries: [ID!]
  directors: [ID!]
  episodeCurrent: String
  episodeTotal: String
  isCopyright: Boolean
  lang: String
  notify: String
  originName: String
  posterUrl: String
  quality: String
  showtimes: String
  slug: String
  status: String
  subDocquyen: Boolean
  thumbUrl: String
  time: String
  trailerUrl: String
  type: String
  year: Float
  episode: [EpisodeInputType!]
  imdb: ImdbInputType
  tmdb: TmdbInputType
  deletedAt: String
}

input MutateHardDeleteMovieInput {
  _id: ID!
}

input UpdateCategoryInput {
  _id: String!
  name: String!
  slug: String
}

input CreateCategoryInput {
  name: String!
  slug: String!
}

input DeleteCategoryInput {
  _id: ID!
}

input UpdateRegionInput {
  name: String
}