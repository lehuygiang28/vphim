@startuml Auth Passwordless Validation Activity Diagram

skinparam ConditionStyle diamond

title Passwordless Login Validation Activity
caption Steps after user receives login email (Magic Link or OTP)

|User|
start
:Receive Login Email;

|User|
:Choose Validation Method;
if (Click Magic Link?) then (yes)
    |Frontend (Login Component)|
    :Receive Hash from URL;
    :Submit Hash;
    |Backend API|
    :Receive POST /auth/login/pwdless/validate (Magic Link);
    :Call AuthService.validateRequestLoginPwdless;
    :Verify JWT Hash (JwtService);
        if (Invalid Hash?) then (yes)
        :Throw UnprocessableEntityException;
        :Return 422 Error;
        |Frontend (Login Component)|
        :Show Invalid Link Message;
        stop
        else (no)
        -> Validated;
        endif
else (Enter OTP)
    |Frontend (Login Component)|
    :Request OTP Input;
        |User|
    :Enter OTP;
        |Frontend (Login Component)|
    :Submit OTP + Email;
    |Backend API|
    :Receive POST /auth/login/pwdless/validate (OTP);
    :Call AuthService.validateRequestLoginPwdless;
    :Retrieve Stored OTP (RedisService);
    :Verify OTP;
    if (Invalid OTP?) then (yes)
        :Throw UnprocessableEntityException;
        :Return 422 Error;
        |Frontend (Login Component)|
        :Show Invalid OTP Message;
        stop
    else (no)
        -> Validated;
    endif
endif

|Backend API|
#palegreen:Validated;
:Find User by ID from Hash/OTP Data;
:Check if User Blocked;
    if (User Blocked?) then (yes)
    :Throw UnprocessableEntityException;
    :Return 422 Error;
    |Frontend (Login Component)|
    :Show Blocked Message;
    stop
    else (no)
    :Verify Stored Hash/OTP Match;
        if (No Match?) then (yes)
        :Throw UnprocessableEntityException;
        :Return 422 Error;
        |Frontend (Login Component)|
        :Show Invalid Link/OTP Message;
        stop
        else (no)
        |Backend API|
        :Generate Access & Refresh Tokens (JwtService);
        :Delete Hash/OTP Key (RedisService);
        if (Email Not Verified?) then (yes)
            :Update User: emailVerified = true;
        endif
        :Return Tokens & User Data (from Service);
        :Return 200 OK with LoginResponseDto (from Controller);
        |Frontend (Login Component)|
        :Receive Tokens & User Data;
        :next-auth stores session (JWT Cookie);
        :Redirect to Target Page;
        -> Logged In;
    endif
endif

#lightgreen:Logged In;
|Frontend (Login Component)|
:User is Authenticated;

stop
@enduml
