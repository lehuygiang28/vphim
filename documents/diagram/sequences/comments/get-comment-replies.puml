@startuml Get Comment Replies Flow

skinparam SequenceMessageAlignment center
skinparam SequenceBoxBackgroundColor white
skinparam SequenceBoxBorderColor black
skinparam NoteBackgroundColor lightyellow
skinparam NoteBorderColor black
skinparam ParticipantBackgroundColor white
skinparam ParticipantBorderColor black

title Get Comment Replies Flow (GraphQL)

actor "User" as user
participant "commentPage:MovieComment" as commentPage <<Component>>
participant "commentResolver:CommentResolver" as commentResolver <<Resolver>>
participant "commentService:CommentService" as commentService <<Service>>
participant "commentsRepo:CommentsRepository" as commentsRepo <<Repository>>
database "mongoDB" as mongoDB

user -> commentPage: View comment replies
activate commentPage
commentPage -> commentResolver: Query getCommentReplies(input)
activate commentResolver
commentResolver -> commentService: getCommentReplies(input)
activate commentService
commentService -> commentsRepo: findOne({_id: parentCommentId})
activate commentsRepo
commentsRepo -> mongoDB: Query Comment
mongoDB --> commentsRepo: Parent Comment
commentsRepo --> commentService: parentComment
deactivate commentsRepo
alt parent comment not found
    commentService --> commentResolver: HttpException (Not Found)
    commentResolver --> commentPage: Error
else parent comment found
    commentService -> commentService: Construct matchStage based on includeNestedReplies flag
    commentService -> commentsRepo: aggregate([pipeline])
    activate commentsRepo
    commentsRepo -> mongoDB: Aggregate Query
    note right: Match replies based on criteria\nSort by nesting level & newest\nApply pagination\nLookup user data
    mongoDB --> commentsRepo: Replies
    commentsRepo --> commentService: replies
    deactivate commentsRepo
    commentService -> commentsRepo: count(countFilter)
    activate commentsRepo
    commentsRepo -> mongoDB: Count Query
    mongoDB --> commentsRepo: Total Count
    commentsRepo --> commentService: total
    deactivate commentsRepo
    commentService -> commentService: formatRepliesOutput(replies, total, page, limit)
    commentService --> commentResolver: GetCommentRepliesOutput
end
deactivate commentService
commentResolver --> commentPage: Paginated Replies
deactivate commentResolver

@enduml
