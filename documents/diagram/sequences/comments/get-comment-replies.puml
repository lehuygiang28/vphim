@startuml Get Comment Replies Flow

actor User <<Actor>>
participant "MovieComment (Next.js)" as MovieComment <<Component>>
participant "CommentResolver" as Resolver <<Resolver>>
participant "CommentService" as Service <<Service>>
participant "CommentsRepository" as Repository <<Repository>>
database "MongoDB" as DB <<Database>>

User -> MovieComment: view comment replies
activate MovieComment
MovieComment -> CommentReplyResolver: query getCommentReplies(input)
activate CommentReplyResolver
Resolver -> CommentService: getCommentReplies(input)
activate CommentService
Service -> CommentsRepository: findOne({_id: parentCommentId})
activate CommentsRepository
Repository -> DB: Query Comment
DB --> CommentsRepository: Parent Comment
Repository --> CommentService: parentComment
deactivate CommentsRepository
alt parent comment not found
    Service --> CommentReplyResolver: HttpException (Not Found)
    Resolver --> MovieComment: Error
else parent comment found
    Service -> CommentService: Construct matchStage based on includeNestedReplies flag
    Service -> CommentsRepository: aggregate([pipeline])
    activate CommentsRepository
    Repository -> DB: Aggregate Query
    note right: Match replies based on criteria\nSort by nesting level & newest\nApply pagination\nLookup user data
    DB --> CommentsRepository: Replies
    Repository --> CommentService: replies
    deactivate CommentsRepository
    Service -> CommentsRepository: count(countFilter)
    activate CommentsRepository
    Repository -> DB: Count Query
    DB --> CommentsRepository: Total Count
    Repository --> CommentService: total
    deactivate CommentsRepository
    Service -> CommentService: formatRepliesOutput(replies, total, page, limit)
    Service --> CommentReplyResolver: GetCommentRepliesOutput
end
deactivate CommentService
Resolver --> MovieComment: Paginated Replies
deactivate CommentReplyResolver

@enduml
