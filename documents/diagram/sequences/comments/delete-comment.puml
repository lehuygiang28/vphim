@startuml Delete Comment Flow

actor User <<Actor>>
participant "MovieComment (Next.js)" as MovieComment <<Component>>
participant "CommentResolver" as Resolver <<Resolver>>
participant "CommentService" as Service <<Service>>
participant "CommentsRepository" as Repository <<Repository>>
database "MongoDB" as DB <<Database>>

User -> MovieComment: delete comment
activate MovieComment
MovieComment -> CommentDeleteResolver: mutation deleteComment(input)
activate CommentDeleteResolver
Resolver -> CommentService: deleteComment(input, actor)
activate CommentService
Service -> CommentsRepository: findOne({_id, user: actor.userId})
activate CommentsRepository
Repository -> DB: Query Comment
DB --> CommentsRepository: Comment
Repository --> CommentService: comment
deactivate CommentsRepository
alt comment not found
    Service --> CommentDeleteResolver: HttpException (Not Found)
    Resolver --> MovieComment: Error
else user not authorized
    Service --> CommentDeleteResolver: HttpException (Unauthorized)
    Resolver --> MovieComment: Error
else comment found and user authorized
    Service -> CommentsRepository: count(nested replies filter)
    activate CommentsRepository
    Repository -> DB: Count Nested Replies
    DB --> CommentsRepository: Nested Replies Count
    Repository --> CommentService: nestedRepliesCount
    deactivate CommentsRepository
    Service -> CommentsRepository: deleteMany(all replies)
    activate CommentsRepository
    Repository -> DB: Delete Replies
    DB --> CommentsRepository: Result
    Repository --> CommentService: deletedReplies
    deactivate CommentsRepository
    Service -> CommentsRepository: deleteOne(comment)
    activate CommentsRepository
    Repository -> DB: Delete Comment
    DB --> CommentsRepository: Result
    Repository --> CommentService: deleted
    deactivate CommentsRepository
    alt parent comment exists
        Service -> CommentsRepository: findOneAndUpdate(parent, decrement replyCount)
        activate CommentsRepository
        Repository -> DB: Update Parent Comment
        DB --> CommentsRepository: Updated Parent
        Repository --> CommentService: updatedParent
        deactivate CommentsRepository
    end
    Service --> CommentDeleteResolver: deleted
end
deactivate CommentService
Resolver --> MovieComment: result
Deactivate CommentDeleteResolver

@enduml
