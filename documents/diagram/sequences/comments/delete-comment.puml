@startuml Delete Comment Flow

skinparam SequenceMessageAlignment center
skinparam SequenceBoxBackgroundColor white
skinparam SequenceBoxBorderColor black
skinparam NoteBackgroundColor lightyellow
skinparam NoteBorderColor black
skinparam ParticipantBackgroundColor white
skinparam ParticipantBorderColor black

title Delete Comment Flow (GraphQL)

actor "User" as user
participant "commentPage:MovieComment" as commentPage <<Component>>
participant "commentResolver:CommentResolver" as commentResolver <<Resolver>>
participant "commentService:CommentService" as commentService <<Service>>
participant "commentsRepo:CommentsRepository" as commentsRepo <<Repository>>
database "mongoDB" as mongoDB

user -> commentPage: Delete comment
activate commentPage
commentPage -> commentResolver: Mutation deleteComment(input)
activate commentResolver
commentResolver -> commentService: deleteComment(input, actor)
activate commentService
commentService -> commentsRepo: findOne({_id, user: actor.userId})
activate commentsRepo
commentsRepo -> mongoDB: Query Comment
mongoDB --> commentsRepo: Comment
commentsRepo --> commentService: comment
deactivate commentsRepo
alt comment not found
    commentService --> commentResolver: HttpException (Not Found)
    commentResolver --> commentPage: Error
else user not authorized
    commentService --> commentResolver: HttpException (Unauthorized)
    commentResolver --> commentPage: Error
else comment found and user authorized
    commentService -> commentsRepo: count(nested replies filter)
    activate commentsRepo
    commentsRepo -> mongoDB: Count Nested Replies
    mongoDB --> commentsRepo: Nested Replies Count
    commentsRepo --> commentService: nestedRepliesCount
    deactivate commentsRepo
    commentService -> commentsRepo: deleteMany(all replies)
    activate commentsRepo
    commentsRepo -> mongoDB: Delete Replies
    mongoDB --> commentsRepo: Result
    commentsRepo --> commentService: deletedReplies
    deactivate commentsRepo
    commentService -> commentsRepo: deleteOne(comment)
    activate commentsRepo
    commentsRepo -> mongoDB: Delete Comment
    mongoDB --> commentsRepo: Result
    commentsRepo --> commentService: deleted
    deactivate commentsRepo
    alt parent comment exists
        commentService -> commentsRepo: findOneAndUpdate(parent, decrement replyCount)
        activate commentsRepo
        commentsRepo -> mongoDB: Update Parent Comment
        mongoDB --> commentsRepo: Updated Parent
        commentsRepo --> commentService: updatedParent
        deactivate commentsRepo
    end
    commentService --> commentResolver: deleted
end
deactivate commentService
commentResolver --> commentPage: result
deactivate commentResolver

@enduml
