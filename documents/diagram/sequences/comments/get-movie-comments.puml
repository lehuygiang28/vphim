@startuml Get Movie Comments Flow

actor User <<Actor>>
participant "MovieComment (Next.js)" as MovieComment <<Component>>
participant "CommentResolver" as Resolver <<Resolver>>
participant "CommentService" as Service <<Service>>
participant "MovieService" as MovieService <<Service>>
participant "CommentsRepository" as Repository <<Repository>>
database "MongoDB" as DB <<Database>>

User -> MovieComment: view comments
activate MovieComment
MovieComment -> MovieCommentResolver: query getMovieComments(input)
activate MovieCommentResolver
Resolver -> CommentService: getTopLevelComments(input)
activate CommentService
Service -> MovieCommentService: getMovie({_id: movieId})
activate MovieService
MovieService --> CommentService: movie
deactivate MovieService
alt movie not found
    Service --> MovieCommentResolver: HttpException (Not Found)
    Resolver --> MovieComment: Error
else movie found
    Service -> CommentsRepository: aggregate([pipeline])
    activate CommentsRepository
    Repository -> DB: Aggregate Query
    note right: Match top-level comments\nSort by newest\nApply pagination\nLookup user data
    DB --> CommentsRepository: Comments
    Repository --> CommentService: comments
    deactivate CommentsRepository
    Service -> CommentsRepository: count({movie, parentComment: null})
    activate CommentsRepository
    Repository -> DB: Count Query
    DB --> CommentsRepository: Total Count
    Repository --> CommentService: total
    deactivate CommentsRepository
    Service -> CommentService: formatCommentsOutput(comments, total, page, limit)
    Service --> MovieCommentResolver: GetCommentsOutput
end
deactivate CommentService
Resolver --> MovieComment: Paginated Comments
deactivate MovieCommentResolver

@enduml
