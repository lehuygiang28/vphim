@startuml Get Movie Comments Flow

actor User
participant "GraphQL API" as API
participant "CommentResolver" as Resolver
participant "CommentService" as Service
participant "MovieService" as MovieService
participant "CommentRepository" as Repository
database "MongoDB" as DB

User -> API: movieComments query
activate API

API -> Resolver: getMovieComments(query)
activate Resolver

Resolver -> Service: getTopLevelComments(query)
activate Service

Service -> MovieService: getMovie({_id: movieId})
activate MovieService
MovieService --> Service: movie
deactivate MovieService

alt movie not found
    Service --> Resolver: HttpException (Not Found)
    Resolver --> API: Error
    API --> User: Movie Not Found Error
else movie found
    Service -> Repository: aggregate([pipeline])
    activate Repository
    Repository -> DB: Aggregate Query
    note right: Match top-level comments\nSort by newest\nApply pagination\nLookup user data
    DB --> Repository: Comments
    Repository --> Service: comments
    deactivate Repository
    
    Service -> Repository: count({movie, parentComment: null})
    activate Repository
    Repository -> DB: Count Query
    DB --> Repository: Total Count
    Repository --> Service: total
    deactivate Repository
    
    Service -> Service: formatCommentsOutput(comments, total, page, limit)
    
    Service --> Resolver: GetCommentsOutput
    Resolver --> API: GetCommentsOutput
    API --> User: Paginated Comments
end

deactivate Service
deactivate Resolver
deactivate API

@enduml 