@startuml Update Comment Flow

actor User <<Actor>>
participant "MovieComment (Next.js)" as MovieComment <<Component>>
participant "CommentResolver" as Resolver <<Resolver>>
participant "CommentService" as Service <<Service>>
participant "CommentsRepository" as Repository <<Repository>>
database "MongoDB" as DB <<Database>>

User -> MovieComment: update comment
activate MovieComment
MovieComment -> Resolver: mutation updateComment(input)
activate Resolver
Resolver -> CommentService: updateComment(input, actor)
activate CommentService
Service -> CommentsRepository: findOne({_id, user: actor.userId})
activate CommentsRepository
Repository -> DB: Query Comment
DB --> CommentsRepository: Comment
Repository --> CommentService: comment
deactivate CommentsRepository
alt comment not found
    Service --> Resolver: HttpException (Not Found)
    Resolver --> MovieComment: Error
else user not authorized
    Service --> Resolver: HttpException (Unauthorized)
    Resolver --> MovieComment: Error
else comment found and user authorized
    Service -> CommentsRepository: upsert({_id}, {content, editedAt})
    activate CommentsRepository
    Repository -> DB: Update Comment
    DB --> CommentsRepository: Updated Comment
    Repository --> CommentService: updatedComment
    deactivate CommentsRepository
    Service --> Resolver: updatedComment
end
deactivate CommentService
Resolver --> MovieComment: Updated Comment Data
deactivate Resolver

@enduml
