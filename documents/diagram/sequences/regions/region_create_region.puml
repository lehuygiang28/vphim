@startuml Region - Create Region

actor User <<Actor>>
participant "RegionComponent (Next.js Admin)" as RegionComponent <<Component>>
participant "RegionResolver" as Resolver <<Resolver>>
participant "RequiredRoles Guard" as Guard <<Service>>
participant "RegionsService" as RegionsService <<Service>>
participant "RegionRepository" as RegionRepository <<Repository>>
database "MongoDB" as MongoDB <<Database>>

User -> RegionComponent: Initiates region creation
RegionComponent -> RegionResolver: mutation createRegion(input)
activate RegionResolver

Resolver -> RequiredRoles Guard: check admin role
activate Guard
alt user is admin
    Guard --> RegionResolver: allow
else user is not admin
    Guard --> User: throw ForbiddenException
    deactivate RegionResolver
    deactivate Guard
end
deactivate Guard

Resolver -> RegionsService: createRegion(input)
activate RegionsService

Service -> RegionRepository: findOne(filterQuery: {slug})
activate RegionRepository
Repo -> DB: findOne({slug})
activate DB
DB --> RegionRepository: return existing region or null
deactivate DB
Repo --> RegionsService: return result
deactivate RegionRepository

alt slug already exists
    Service --> RegionResolver: throw BadRequestException
else slug is unique
    RegionsService -> RegionsService: process slug (removeDiacritics, removeTone)

    Service -> RegionRepository: create(document)
    activate RegionRepository
    Repo -> DB: save new region
    activate DB
    DB --> RegionRepository: return saved region
    deactivate DB
    Repo --> RegionsService: return new region
    deactivate RegionRepository

    RegionsService --> RegionResolver: return new region
end

deactivate RegionsService
Resolver --> Client: return created region
deactivate RegionResolver

@enduml