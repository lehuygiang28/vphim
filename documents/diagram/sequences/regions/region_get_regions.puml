@startuml Region - Get Regions

actor User <<Actor>>
participant "RegionComponent (Next.js Admin)" as RegionComponent <<Component>>
participant "RegionResolver" as Resolver <<Resolver>>
participant "RegionsService" as RegionsService <<Service>>
participant "RedisService" as Redis
participant "RegionRepository" as RegionRepository <<Repository>>
database "MongoDB" as MongoDB <<Database>>

User -> RegionComponent: Initiates get regions
RegionComponent -> Resolver: query regions(input)
activate Controller
Resolver -> RegionsService: getRegions(input)
activate Service

RegionsService -> RedisService: get(cacheKey)
activate Redis
RedisService --> RegionsService: return cached data (if exists)
deactivate Redis

alt data from cache exists
    Service --> Controller: return cached data
else no cached data
    Service -> Repo: find(filterQuery, query)
    activate Repo
    Repo -> DB: find regions
    activate DB
    DB --> Repo: return regions
    deactivate DB
    Repo --> Service: return regions
    deactivate Repo

    Service -> Repo: count(filterQuery)
    activate Repo
    Repo -> DB: count regions
    activate DB
    DB --> Repo: return count
    deactivate DB
    Repo --> Service: return count
    deactivate Repo

    RegionsService -> RedisService: set(cacheKey, result, expiry)
    activate Redis
    RedisService --> RegionsService: confirm cache set
    deactivate Redis

    RegionsService --> Resolver: return result {data, total, count}
end

Resolver --> RegionComponent: return regions
deactivate Service
deactivate Controller

@enduml 