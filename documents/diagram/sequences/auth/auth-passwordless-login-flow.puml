@startuml Passwordless Login Flow
!theme plain
skinparam sequenceMessageAlign center
skinparam maxMessageSize 250
skinparam noteFontSize 12
skinparam BoxPadding 10

autonumber

title Passwordless Login Flow
caption Magic link and OTP-based authentication

actor User #Black
participant "Frontend" as FE #PaleGreen
participant "AuthController" as AC #LightBlue
participant "AuthService" as AS #LightBlue
participant "UsersService" as US #LightBlue
participant "JwtService" as JWT #Orange
participant "Redis" as Redis #Pink
participant "MailQueue" as Mail #Yellow
participant "Database" as DB #Gray

' Request Passwordless Login
group "Request Login Link/OTP"
    User -> FE ++ : Submit email
    note right: User provides email address only
    FE -> AC ++ : POST /auth/login/pwdless (email, returnUrl)
    AC -> AS ++ : requestLoginPwdless(data)
    note right: Normalize email (lowercase, trim)

    AS -> US ++ : findByEmail(email)
    US -> DB ++ : query
    return result
    deactivate US

    alt User not found
        AS -> US ++ : create new user
        note right: Auto-registration for new users
        US -> DB ++ : insert
        return user created
        deactivate US
    end

    alt User blocked
        AS --> AC -- : throw UnprocessableEntityException
        AC --> FE -- : 422 User blocked
        FE --> User -- : Show blocked message
    else User not blocked
        AS -> JWT ++ : signAsync token (userId, email)
        return hash

        AS -> AS ++ : generate OTP
        note right: 6-digit one-time password
        return OTP code

        AS -> AS ++ : Generate key "auth:requestLoginPwdlessHash:{email}"
        return key

        AS -> Redis ++ : set hash and OTP with expiry
        return confirm stored

        AS -> AS ++ : Create URL with hash for magic link
        return magic link URL

        AS ->> Mail : add 'sendEmailLogin' to queue with link and OTP
        note right: Asynchronous operation
        Mail -->> AS : email queued

        AS --> AC -- : "OK"
        AC --> FE -- : 200 OK
        FE --> User -- : Check your email
    end
end

|||
note across: User receives email with magic link and OTP code
|||

' Validate Passwordless Login
group "Validate Login"
    alt User clicks magic link
        User -> FE ++ : Click magic link with hash
        FE -> AC ++ : POST /auth/login/pwdless/validate (hash, email)
        AC -> AS ++ : validateRequestLoginPwdless(hash, email)
        AS -> JWT ++ : verifyAsync hash
        note right: Verify JWT signature and expiry
        return decoded data or error
    else User enters OTP
        User -> FE ++ : Enter OTP
        FE -> AC ++ : POST /auth/login/pwdless/validate (otp, email)
        AC -> AS ++ : validateRequestLoginPwdless(otp, email)
        AS -> AS ++ : Check if input is OTP (6 digits)
        return isOtp = true
        AS -> AS ++ : Generate key "auth:requestLoginPwdlessHash:{email}"
        return key
        AS -> Redis ++ : get stored OTP data
        return OTP data
    end

    alt Invalid hash/OTP
        AS --> AC -- : throw UnprocessableEntityException
        AC --> FE -- : 422 Invalid hash/OTP
        FE --> User -- : Show error message
    else Valid hash/OTP
        AS -> US ++ : findByIdOrThrow(userId)
        US -> DB ++ : query
        return user
        deactivate US

        alt User blocked
            AS --> AC -- : throw UnprocessableEntityException
            AC --> FE -- : 422 User blocked
            FE --> User -- : Show blocked message
        else User not blocked
            AS -> Redis ++ : get hash/OTP data
            return hash/OTP data

            alt Invalid match
                AS --> AC -- : throw UnprocessableEntityException
                AC --> FE -- : 422 Invalid hash/OTP
                FE --> User -- : Show error message
            else Valid match
                AS -> AS ++ : generateTokens(user)

                AS -> JWT ++ : signAsync access token
                return accessToken

                AS -> JWT ++ : signAsync refresh token
                return refreshToken

                AS -> Redis ++ : del(key)
                note right: One-time use only
                return confirm deleted

                alt Email not verified
                    AS -> US ++ : update user (emailVerified: true)
                    note right: Auto-verify email on successful login
                    US -> DB ++ : update
                    return updated
                    deactivate US
                end

                AS --> AC -- : LoginResponseDto
                AC --> FE -- : 200 tokens + user
                FE --> User -- : Login successful
            end
        end
    end
end

@enduml
