@startuml Passwordless Login Flow
!theme plain
skinparam sequenceMessageAlign center
skinparam maxMessageSize 250
skinparam noteFontSize 12
skinparam BoxPadding 10

autonumber

title Passwordless Login Flow
caption Magic link and OTP-based authentication

actor User <<Actor>>
participant "Login (Next.js)" as LoginComponent <<Component>>
participant "AuthController" as AuthController <<Controller>>
participant "AuthService" as AuthService <<Service>>
participant "UsersService" as UsersService <<Service>>
participant "JwtService" as JwtService <<Service>>
participant "RedisService" as RedisService <<Service>>
participant "MailQueue" as MailQueue <<Queue>>
database "MongoDB" as DB <<Database>>

' Request Passwordless Login
group "Request Login Link/OTP"
    User -> LoginComponent: Submit email
    note right: User provides email address only
    LoginComponent -> AuthController: POST /auth/login/pwdless (email, returnUrl)
    AuthController -> AuthService: requestLoginPwdless(data)
    note right: Normalize email (lowercase, trim)

    AuthService -> UsersService: findByEmail(email)
    UsersService -> DB: query
    return result
    deactivate UsersService

    alt User not found
        AuthService -> UsersService: create new user
        note right: Auto-registration for new users
        UsersService -> DB: insert
        return user created
        deactivate UsersService
    end

    alt User blocked
        AuthService --> AuthController: throw UnprocessableEntityException
        AuthController --> LoginComponent: 422 User blocked
        LoginComponent --> User: Show blocked message
    else User not blocked
        AuthService -> JwtService: signAsync token (userId, email)
        return hash

        AuthService -> AuthService: generate OTP
        note right: 6-digit one-time password
        return OTP code

        AuthService -> RedisService: set hash and OTP with expiry
        return confirm stored

        AuthService -> MailQueue: add 'sendEmailLogin' to queue with link and OTP
        note right: Asynchronous operation
        MailQueue --> AuthService: email queued

        AuthService --> AuthController: "OK"
        AuthController --> LoginComponent: 200 OK
        LoginComponent --> User: Check your email
    end
end

|||
note across: User receives email with magic link and OTP code
|||

' Validate Passwordless Login
group "Validate Login"
    alt User clicks magic link
        User -> LoginComponent: Click magic link with hash
        LoginComponent -> AuthController: POST /auth/login/pwdless/validate (hash, email)
        AuthController -> AuthService: validateRequestLoginPwdless(hash, email)
        AuthService -> JwtService: verifyAsync hash
        note right: Verify JWT signature and expiry
        return decoded data or error
    else User enters OTP
        User -> LoginComponent: Enter OTP
        LoginComponent -> AuthController: POST /auth/login/pwdless/validate (otp, email)
        AuthController -> AuthService: validateRequestLoginPwdless(otp, email)
        AuthService -> RedisService: get stored OTP data
        return OTP data
    end

    alt Invalid hash/OTP
        AuthService --> AuthController: throw UnprocessableEntityException
        AuthController --> LoginComponent: 422 Invalid hash/OTP
        LoginComponent --> User: Show error message
    else Valid hash/OTP
        AuthService -> UsersService: findByIdOrThrow(userId)
        UsersService -> DB: query
        return user
        deactivate UsersService

        alt User blocked
            AuthService --> AuthController: throw UnprocessableEntityException
            AuthController --> LoginComponent: 422 User blocked
            LoginComponent --> User: Show blocked message
        else User not blocked
            AuthService -> RedisService: get hash/OTP data
            return hash/OTP data

            alt Invalid match
                AuthService --> AuthController: throw UnprocessableEntityException
                AuthController --> LoginComponent: 422 Invalid hash/OTP
                LoginComponent --> User: Show error message
            else Valid match
                AuthService -> AuthService: generateTokens(user)

                AuthService -> JwtService: signAsync access token
                return accessToken

                AuthService -> JwtService: signAsync refresh token
                return refreshToken

                AuthService -> RedisService: del(key)
                note right: One-time use only
                return confirm deleted

                alt Email not verified
                    AuthService -> UsersService: update user (emailVerified: true)
                    note right: Auto-verify email on successful login
                    UsersService -> DB: update
                    return updated
                    deactivate UsersService
                end

                AuthService --> AuthController: LoginResponseDto
                AuthController --> LoginComponent: 200 tokens + user
                LoginComponent --> User: Login successful
            end
        end
    end
end

@enduml
