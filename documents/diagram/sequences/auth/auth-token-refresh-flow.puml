@startuml Token Refresh Flow
!theme plain
skinparam sequenceMessageAlign center
skinparam maxMessageSize 250
skinparam noteFontSize 12
skinparam BoxPadding 10

autonumber

title Token Refresh Flow
caption Process to obtain new access and refresh tokens using a valid refresh token

actor User <<Actor>>
participant "AuthProvider" as AuthProvider <<Component>>
participant "AuthController" as AuthController <<Controller>>
participant "JwtRefreshStrategy" as JwtRefreshStrategy <<Strategy>>
participant "AuthService" as AuthService <<Service>>
participant "UsersService" as UsersService <<Service>>
participant "JwtService" as JwtService <<Service>>
database "MongoDB" as DB <<Database>>

User -> AuthProvider: User action (requires authentication)
alt Access token valid
    AuthProvider -> AuthController: Proceed with request
    AuthController --> AuthProvider: Success
    AuthProvider --> User: Action completed
else Access token expired or invalid (401/403)
    note right: On 401/403 error, client checks for refresh token
    alt Has refresh token
        AuthProvider -> AuthProvider: Check for refresh token
        AuthProvider -> AuthController: POST /auth/refresh (refreshToken)
        note right: Send refresh token in body
    else No refresh token
        AuthProvider -> AuthProvider: No refresh token available
        AuthProvider --> User: Redirect to login
    end

AuthController -> JwtRefreshStrategy: validate refresh token
note right: Protected by jwt-refresh guard
JwtRefreshStrategy -> JwtRefreshStrategy: verify jwt signature
note right: Check token validity and expiry
return verification result

alt Invalid token
    JwtRefreshStrategy --> AuthController: throw UnauthorizedException
    note right: Token expired, invalid or tampered
    AuthController --> AuthProvider: 401 Invalid refresh token
    AuthProvider --> User: Redirect to login
else Valid token
    JwtRefreshStrategy --> AuthController: UserJwt payload

    AuthController -> AuthService: refreshToken(user)
    note right: User data from JWT payload

    AuthService -> UsersService: findByEmail(email)
    UsersService -> DB: query
    return user
    deactivate UsersService

    alt User not found
        AuthService --> AuthController: throw UnprocessableEntityException
        AuthController --> AuthProvider: 422 User doesn't exist
        AuthProvider --> User: Logout
    else User found
        alt User blocked
            AuthService --> AuthController: throw UnprocessableEntityException
            AuthController --> AuthProvider: 422 User blocked
            AuthProvider --> User: Show blocked message
        else User not blocked
            AuthService -> AuthService: generateTokens(user)

            AuthService -> JwtService: signAsync access token
            return accessToken

            AuthService -> JwtService: signAsync refresh token
            return refreshToken

            AuthService --> AuthController: LoginResponseDto
            AuthController --> AuthProvider: 200 tokens + user
            AuthProvider --> User: Continue session
            note right: Store new tokens and update authorization header
        end
    end
end

@enduml
