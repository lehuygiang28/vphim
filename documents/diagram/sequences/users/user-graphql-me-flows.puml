@startuml User GraphQL Me Flows

actor "User" as user
participant "UserPage (Next.js)" as userPage <<Component>>
participant "UsersResolver" as usersResolver <<Resolver>>
participant "UsersService" as usersService <<Service>>
participant "UsersRepository" as usersRepository <<Repository>>
database "MongoDB" as mongoDB <<Database>>





note over userPage, mongoDB: Get Me Flow

userPage -> usersResolver: getMe(actor)
activate usersResolver

usersResolver -> usersService: findByIdOrThrow(userId, options)
activate usersService

usersService -> usersRepository: findOne(userId, options)
activate usersRepository
usersRepository -> mongoDB: Query user with populated followMovies
mongoDB --> usersRepository: User document with followMovies
usersRepository --> usersService: Return user or null
deactivate usersRepository

alt User not found
    usersService --> usersResolver: Throw UnprocessableEntityException
    usersResolver --> userPage: GraphQL Error Response
else User found
    usersService --> usersResolver: Return user
    usersResolver --> userPage: GraphQL Response with User data
end

deactivate usersService
deactivate usersResolver

note over userPage, mongoDB: Update Me Flow

userPage -> usersResolver: mutationMe(input, actor)
activate usersResolver

usersResolver -> usersService: update(userId, updateData)
activate usersService

alt updateData has password
    usersService -> usersService: Generate password hash with bcrypt
end

usersService -> usersRepository: findOneAndUpdate(userId, updateQuery)
activate usersRepository
usersRepository -> mongoDB: Update user document
mongoDB --> usersRepository: Updated user document
usersRepository --> usersService: Return updated user or null
deactivate usersRepository

alt User not found
    usersService --> usersResolver: Return null
    usersResolver --> userPage: GraphQL Response with null
else User updated
    usersService --> usersResolver: Return updated User
    usersResolver --> userPage: GraphQL Response with updated User data
end

deactivate usersService
deactivate usersResolver

@enduml
