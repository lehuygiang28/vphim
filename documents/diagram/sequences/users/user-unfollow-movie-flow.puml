@startuml User Unfollow Movie Flow

actor "User" as user
participant "UserFollowMovieButton (Next.js)" as userFollowMovieButton <<Component>>
participant "UsersResolver" as usersResolver <<Resolver>>
participant "UsersService" as usersService <<Service>>
participant "MovieService" as movieService <<Service>>
participant "UsersRepository" as usersRepository <<Repository>>
database "MongoDB" as mongoDB <<Database>>


participant "MovieService" as MovieService



userFollowMovieButton -> usersResolver: unfollowMovie(input, actor)
activate usersResolver

usersResolver -> usersService: unfollowMovie({ actor, movieSlug })
activate usersService

usersService -> usersService: findByIdOrThrow(actor.userId)
activate usersService #DarkSalmon
usersService -> usersRepository: findOne(actor._id)
usersRepository -> mongoDB: Query user
mongoDB --> usersRepository: User document
usersRepository --> usersService: Return user or null
alt User not found
    usersService --> usersService: Throw UnprocessableEntityException
end
usersService --> usersService: Return actor user
deactivate usersService

usersService -> movieService: getMovie({ slug: movieSlug }, { populate: false })
activate movieService
movieService --> usersService: Return movie or null
deactivate movieService

alt Movie not found
    usersService --> usersResolver: Throw HttpException\n(UNPROCESSABLE_ENTITY)
    usersResolver --> userFollowMovieButton: GraphQL Error Response
else Movie exists
    usersService -> usersService: Remove movie ID from followMovies list

    alt Movie was not in followMovies list
        usersService --> usersResolver: Return unchanged user
        usersResolver --> userFollowMovieButton: GraphQL Response with unchanged User data
    else Movie was in followMovies list
        usersService -> usersRepository: findOneAndUpdate(actor._id, updateQuery)
        activate usersRepository
        usersRepository -> mongoDB: Update user's followMovies
        mongoDB --> usersRepository: Updated user document
        usersRepository --> usersService: Return updated user
        deactivate usersRepository

        usersService --> usersResolver: Return updated User
        usersResolver --> userFollowMovieButton: GraphQL Response with updated User data
    end
end

deactivate usersService
deactivate usersResolver

@enduml
