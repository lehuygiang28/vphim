@startuml GraphQL Get Directors Flow

skinparam SequenceMessageAlignment center
skinparam SequenceBoxBackgroundColor white
skinparam SequenceBoxBorderColor black
skinparam NoteBackgroundColor lightyellow
skinparam NoteBorderColor black
skinparam ParticipantBackgroundColor white
skinparam ParticipantBorderColor black

title GraphQL Get Directors Flow

actor Client
participant "GraphQL Server" as GraphQL
participant "Director Resolver" as Resolver
participant "Director Service" as Service
participant "Redis Service" as Redis
participant "Director Repository" as Repository
database "MongoDB" as DB

Client -> GraphQL : Query directors(input: {keywords, limit, page})
activate GraphQL
GraphQL -> Resolver : directors(input)
activate Resolver

Resolver -> Service : getDirectors(input)
activate Service

Service -> Redis : get(cacheKey)
activate Redis
note right of Redis
  Cache key: CACHED:DIRECTORS:{sorted query string}
end note
Redis --> Service : cache result or null
deactivate Redis

alt cache hit
    Service --> Resolver : Return cached data with\nDate objects converted
else cache miss
    Service -> Repository : find(filters, query)
    activate Repository
    Repository -> DB : Find directors matching filters
    activate DB
    DB --> Repository : Return directors
    deactivate DB
    Repository --> Service : Return directors
    deactivate Repository
    
    Service -> Repository : count(filters)
    activate Repository
    Repository -> DB : Count directors matching filters
    activate DB
    DB --> Repository : Return count
    deactivate DB
    Repository --> Service : Return count
    deactivate Repository
    
    Service -> Redis : set(cacheKey, result, 10s)
    activate Redis
    Redis --> Service : Cache set
    deactivate Redis
    
    Service --> Resolver : Return { data, total, count }
end

Resolver --> GraphQL : Return GetDirectorsOutput
deactivate Service
deactivate Resolver

GraphQL --> Client : JSON Response
deactivate GraphQL

@enduml 