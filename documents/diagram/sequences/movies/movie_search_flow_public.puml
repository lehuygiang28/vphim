@startuml Public Search Movies Flow (GraphQL)

skinparam SequenceMessageAlignment center
skinparam SequenceBoxBackgroundColor white
skinparam SequenceBoxBorderColor black
skinparam NoteBackgroundColor lightyellow
skinparam NoteBorderColor black
skinparam ParticipantBackgroundColor white
skinparam ParticipantBorderColor black

title Public Search Movies Flow (GraphQL)

actor "user" as user
participant "movieListPage:MovieList" as movieListPage <<Page>>
participant "movieListComponent:MovieListComponent" as movieListComponent <<Component>>
participant "movieResolver:MovieResolver" as movieResolver <<Resolver>>
participant "movieService:MovieService" as movieService <<Service>>
participant "redisService:RedisService" as redisService <<Service>>
participant "elasticsearchService:ElasticsearchService" as elasticsearchService <<Service>>
database "elasticsearch:Elasticsearch" as elasticsearch <<Database>>
participant "Google Gemini AI" as googleGeminiAI <<AI>>

user -> movieListPage : Navigate to movie list page
activate movieListPage
movieListPage -> movieListComponent : Display movie list
activate movieListComponent
user -> movieListComponent : Initiates movie search
movieListComponent -> movieResolver : Query movies(input)
activate movieResolver
movieResolver -> movieService : getMoviesEs(input, false, false)
activate movieService
alt has keywords & useAI flag enabled
    movieService -> redisService : get cached AI analysis
    redisService --> movieService : cached result or null
    alt cache miss
        movieService -> googleGeminiAI : AI text analysis
        googleGeminiAI --> movieService : AI analysis result
        movieService -> redisService : set AI analysis in cache
    end
    movieService -> movieService : getAIFilter(aiAnalysis, userFilters)
    movieService --> movieService : AI-enhanced Elasticsearch query
else standard search
    movieService -> movieService : buildTraditionalQuery(dto, isAdmin=false)
    movieService --> movieService : Elasticsearch query
end
movieService -> elasticsearchService : search(index=movies, body)
activate elasticsearchService
elasticsearchService -> elasticsearch : execute search query
elasticsearch --> elasticsearchService : search results
note right of movieService
  Public cannot see deleted movies (recycle bin)
  and sensitive categories (e.g., phim-18)
end note
deactivate elasticsearchService
movieService --> movieResolver : { data: MovieType[], total: number }
deactivate movieService
movieResolver --> movieListComponent : { data, total }
deactivate movieResolver
movieListComponent --> movieListPage : Display search results
movieListPage --> user : Show search results
deactivate movieListComponent
deactivate movieListPage

@enduml
