@startuml Movie Update Flow

actor User <<Actor>>
' Stereotypes: <<Component>>, <<Resolver>>, <<Service>>, <<Repository>>, <<Service>>, <<Service>>, <<Database>>, <<Database>>
participant "EditMovie (Next.js Admin)" as EditMovie <<Component>>
participant "MovieResolver" as Resolver <<Resolver>>
participant "MovieService" as MovieService <<Service>>
participant "MovieRepository" as MovieRepository <<Repository>>
participant "SearchService" as SearchService <<Service>>
participant "ElasticsearchService" as ElasticsearchService <<Service>>
database "MongoDB" as MongoDB <<Database>>
database "Elasticsearch" as Elasticsearch <<Database>>

User -> EditMovie: Initiates movie update
EditMovie -> Resolver: mutation updateMovie(input)
activate Resolver
Resolver -> MovieService: updateMovie(input)
activate Service
alt input.deletedAt == 'delete'
    MovieService -> MovieRepository: findOneAndUpdate({ _id }, { deletedAt: new Date() })
    activate Repository
    Repository -> MongoDB: findOneAndUpdate document
    MongoDB --> Repository: updated document
    deactivate MongoDB
    deactivate Repository
else input.deletedAt == 'restore'
    Service -> Repository: findOneAndUpdate({ _id }, { deletedAt: null })
    activate Repository
    Repository -> MongoDB: findOneAndUpdate document
    MongoDB --> Repository: updated document
    deactivate MongoDB
    deactivate Repository
else input.deletedAt == undefined
    Service -> Repository: findOneAndUpdate({ _id }, { ...updateFields })
    activate Repository
    Repository -> MongoDB: findOneAndUpdate document
    MongoDB --> Repository: updated document
    deactivate MongoDB
    deactivate Repository
end
note right of MovieRepository
  MovieSchema.post('findOneAndUpdate') hook triggers
  after document is updated
end note
MovieRepository -> SearchService: indexMovie(document)
activate SearchService
SearchService -> MovieRepository: findOne(movie._id) with populated fields
MovieRepository --> SearchService: fully populated movie document
SearchService -> ElasticsearchService: update(index=movies, id=movie._id, body)
activate ElasticsearchService
ElasticsearchService -> Elasticsearch: update/index document
Elasticsearch --> ElasticsearchService: update result
ElasticsearchService -> Elasticsearch: indices.refresh(index=movies)
Elasticsearch --> ElasticsearchService: refresh result
deactivate ElasticsearchService
SearchService --> MovieRepository: indexing result
deactivate SearchService
alt document not found
    MovieService --> Resolver: throw NotFoundException
    Resolver --> EditMovie: Error: Movie not found
else document found
    Service --> Resolver: MovieType instance
    Resolver --> EditMovie: MovieType
end
deactivate Service
deactivate Resolver

@enduml
