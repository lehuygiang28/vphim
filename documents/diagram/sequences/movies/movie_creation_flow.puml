@startuml Movie Creation Flow

skinparam SequenceMessageAlignment center
skinparam SequenceBoxBackgroundColor white
skinparam SequenceBoxBorderColor black
skinparam NoteBackgroundColor lightyellow
skinparam NoteBorderColor black
skinparam ParticipantBackgroundColor white
skinparam ParticipantBorderColor black

title Create Movie Flow (GraphQL)

actor "adminUser" as adminUser
participant "createMoviePage:CreateMovie" as createMoviePage <<Page>>
participant "createMovieForm:CreateMovieForm" as createMovieForm <<Component>>
participant "movieResolver:MovieResolver" as movieResolver <<Resolver>>
participant "jwtStrategy:JwtGqlStrategy" as jwtStrategy <<Strategy>>
participant "rolesGuard:RolesGuard" as rolesGuard <<Guard>>
participant "movieService:MovieService" as movieService <<Service>>
participant "movieRepo:MovieRepository" as movieRepo <<Repository>>
participant "searchService:SearchService" as searchService <<Service>>
participant "elasticsearchService:ElasticsearchService" as elasticsearchService <<Service>>
database "mongoDB:MongoDB" as mongoDB <<Database>>
database "elasticsearch:Elasticsearch" as elasticsearch <<Database>>

adminUser -> createMoviePage : Navigate to movie creation page
activate createMoviePage
createMoviePage -> createMovieForm : Display form
activate createMovieForm
adminUser -> createMovieForm : Fills movie fields
createMovieForm -> movieResolver : Mutation createMovie(input: CreateMovieInput)
activate movieResolver
movieResolver -> jwtStrategy : Validate JWT token
activate jwtStrategy
jwtStrategy --> movieResolver : Return UserJwt
deactivate jwtStrategy
movieResolver -> rolesGuard : Check admin role permissions
activate rolesGuard
rolesGuard --> movieResolver : Validate admin role
deactivate rolesGuard
movieResolver -> movieService : createMovie({input})
activate movieService
movieService -> movieRepo : create({document: {...}})
activate movieRepo
movieRepo -> mongoDB : Insert new movie document
activate mongoDB
mongoDB --> movieRepo : Return created movie
deactivate mongoDB
movieRepo --> movieService : Return created movie
deactivate movieRepo
note right of movieRepo
  MovieSchema.post('save') hook triggers
  after document is saved
end note
movieService -> searchService : indexMovie(document)
activate searchService
searchService -> movieRepo : findOne(movie._id) with populated fields
movieRepo --> searchService : fully populated movie document
searchService -> elasticsearchService : update(index=movies, id=movie._id)
activate elasticsearchService
elasticsearchService -> elasticsearch : update/index document
elasticsearch --> elasticsearchService : update result
elasticsearchService -> elasticsearch : indices.refresh(index=movies)
elasticsearch --> elasticsearchService : refresh result
deactivate elasticsearchService
searchService --> movieService : indexing result
deactivate searchService
movieService --> movieResolver : new MovieType instance
deactivate movieService
movieResolver --> createMovieForm : Movie document
deactivate movieResolver
createMovieForm --> createMoviePage : Complete form submission
createMoviePage --> adminUser : Redirect to movie details page

deactivate createMovieForm
deactivate createMoviePage

@enduml
