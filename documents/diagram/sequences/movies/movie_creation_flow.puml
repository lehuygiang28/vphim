@startuml Movie Creation Flow

actor User <<Actor>>
' Stereotypes: <<Component>>, <<Resolver>>, <<Service>>, <<Repository>>, <<Service>>, <<Service>>, <<Database>>, <<Database>>
participant "CreateMovie (Next.js Admin)" as CreateMovie <<Component>>
participant "MovieResolver" as Resolver <<Resolver>>
participant "MovieService" as MovieService <<Service>>
participant "MovieRepository" as MovieRepository <<Repository>>
participant "SearchService" as SearchService <<Service>>
participant "ElasticsearchService" as ElasticsearchService <<Service>>
database "MongoDB" as MongoDB <<Database>>
database "Elasticsearch" as Elasticsearch <<Database>>

User -> CreateMovie: Initiates movie creation
CreateMovie -> Resolver: mutation createMovie(input)
activate Resolver
Resolver -> MovieMovieService: createMovie(input)
activate MovieService
MovieService -> MovieMovieRepository: create(movie)
activate MovieRepository
MovieRepository -> MongoDB: save movie document
MongoDB --> MovieMovieRepository: saved document
deactivate MongoDB
deactivate MovieRepository
note right of MovieRepository
  MovieSchema.post('save') hook triggers
  after document is saved
end note
MovieRepository -> SearchMovieService: indexMovie(document)
activate SearchService
SearchService -> MovieMovieRepository: findOne(movie._id) with populated fields
MovieRepository --> SearchMovieService: fully populated movie document
SearchService -> ElasticsearchMovieService: update(index=movies, id=movie._id)
activate ElasticsearchService
ElasticsearchService -> Elasticsearch: update/index document
Elasticsearch --> ElasticsearchMovieService: update result
ElasticsearchService -> Elasticsearch: indices.refresh(index=movies)
Elasticsearch --> ElasticsearchMovieService: refresh result
deactivate ElasticsearchService
SearchService --> MovieMovieRepository: indexing result
deactivate SearchService
MovieService --> Resolver: new MovieType instance
deactivate MovieService
Resolver --> CreateMovie: Movie document
deactivate Resolver

@enduml
