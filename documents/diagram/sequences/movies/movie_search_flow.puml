@startuml Movie Search Flow

actor User <<Actor>>
' Stereotypes: <<Component>>, <<Resolver>>, <<Service>>, <<Service>>, <<Service>>, <<Database>>
participant "MovieList (Next.js Admin)" as MovieList <<Component>>
participant "MovieResolver" as Resolver <<Resolver>>
participant "MovieService" as Service <<Service>>
participant "RedisService" as RedisService <<Service>>
participant "ElasticsearchService" as ElasticsearchService <<Service>>
database "Elasticsearch" as Elasticsearch <<Database>>

User -> MovieList: Initiates movie search
MovieList -> Resolver: query getMovies(input)
activate Resolver
Resolver -> Service: getMoviesEs(input)
activate Service
alt has keywords & useAI flag enabled
    Service -> Service: analyzeSearchQuery(keywords, categories, countries, years)
    activate Service #DarkSalmon
    Service -> RedisService: get cached AI analysis
    RedisService --> Service: cached result or null
    alt cache miss
        Service -> External: AI text analysis
        External --> Service: AI analysis result
        Service -> RedisService: set AI analysis in cache
    end
    Service -> Service: getAIFilter(aiAnalysis, userFilters)
    Service --> Service: AI-enhanced Elasticsearch query
    deactivate Service #DarkSalmon
else standard search
    Service -> Service: buildTraditionalQuery(dto)
    activate Service #LightBlue
    alt has categories
        Service -> Service: process categories filter
    end
    alt has countries
        Service -> Service: process countries filter
    end
    alt has years
        Service -> Service: processYearFilter(years)
    end
    alt has keywords
        Service -> Service: add multi_match query
    end
    Service --> Service: Elasticsearch query
    deactivate Service #LightBlue
end
Service -> Service: executeSearch(query, dto, isRestful)
activate Service #LightGreen
Service -> ElasticsearchService: search(index=movies, body)
activate ElasticsearchService
ElasticsearchService -> Elasticsearch: execute search query
Elasticsearch --> ElasticsearchService: search results
deactivate ElasticsearchService
alt isRestful == true
    Service -> Service: create MovieResponseDto objects
else
    Service -> Service: create MovieType objects
end
Service --> Service: formatted results & total
deactivate Service #LightGreen
Service --> Resolver: { data: MovieType[], total: number }
deactivate Service
Resolver --> MovieList: { data, total }
deactivate Resolver

@enduml
