@startuml Update Actor Flow

skinparam SequenceMessageAlignment center
skinparam SequenceBoxBackgroundColor white
skinparam SequenceBoxBorderColor black
skinparam NoteBackgroundColor lightyellow
skinparam NoteBorderColor black
skinparam ParticipantBackgroundColor white
skinparam ParticipantBorderColor black

title Update Actor Flow (GraphQL)

actor "Admin User" as adminUser
participant "editUI:EditActorPage" as editUI #LightBlue
participant "personForm:PersonResourceForm" as personForm #LightBlue
participant "baseForm:BaseResourceForm" as baseForm #LightBlue
participant "apolloClient:ApolloClient" as apolloClient #LightBlue
participant "actorResolver:ActorResolver" as actorResolver
control "jwtStrategy:JwtGqlStrategy" as jwtStrategy
control "rolesGuard:RolesGuard" as rolesGuard
participant "actorService:ActorService" as actorService
participant "actorRepo:ActorRepository" as actorRepo
database "MongoDB" as mongoDB

adminUser -> editUI : Edits actor details
activate editUI
editUI -> personForm : Display form with existing data
activate personForm
personForm -> baseForm : Render form fields
activate baseForm
adminUser -> baseForm : Updates actor fields

baseForm -> apolloClient : Execute updateActor mutation
activate apolloClient
apolloClient -> actorResolver : Mutation updateActor(input: UpdateActorInput)
activate actorResolver

actorResolver -> jwtStrategy : Validate JWT token
activate jwtStrategy
jwtStrategy --> actorResolver : Return UserJwt
deactivate jwtStrategy

actorResolver -> rolesGuard : Check admin role permissions
activate rolesGuard
rolesGuard --> actorResolver : Validate admin role
deactivate rolesGuard

actorResolver -> actorService : updateActor({_id:String, name:String, ...})
activate actorService

actorService -> actorRepo : findOneAndUpdateOrThrow({filterQuery:object, updateQuery:object})
activate actorRepo
note right of actorRepo
  filterQuery: { _id: ObjectId }
  updateQuery: { name, originalName, posterUrl }
end note

actorRepo -> mongoDB : Find and update actor
activate mongoDB
alt actor found
    mongoDB --> actorRepo : Return updated actor:Actor
else actor not found
    mongoDB --> actorRepo : Return null
end
deactivate mongoDB

alt actor found and updated
    actorRepo --> actorService : Return updated actor:ActorType
else actor not found
    actorRepo --> actorService : Throw NotFoundException
end
deactivate actorRepo

actorService --> actorResolver : Return updated actor:ActorType
deactivate actorService

actorResolver --> apolloClient : Return ActorType
deactivate actorResolver
apolloClient --> baseForm : Return success with actor data
deactivate apolloClient
baseForm --> personForm : Update form with success
deactivate baseForm
personForm --> editUI : Complete form submission
deactivate personForm
editUI --> adminUser : Show update confirmation
deactivate editUI

@enduml
